stages:
- stage: Build
  jobs:
  - template: job-template.yml
    parameters:
      jobTitle: BuildBinaries
      displayName: Build solution
      matrix:
        linux:
          imageName: ubuntu-18.04
        mac:
          imageName: macos-10.15
        windows:
          imageName: windows-2019
      steps:
      - task: CmdLine@2 # Restore frequently fails when using it
        displayName: Disable Nuget source "Microsoft Visual Studio Offline Packages"
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Not an issue on Linux and MacOS obviously
        inputs:
          script: dotnet nuget disable source "Microsoft Visual Studio Offline Packages"
  
      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: build
          projects: src/*.sln
          arguments: >-
            --configuration Release
            --no-incremental
            --nologo
            -p:TreatWarningsAsErrors=true
            -p:Version=$(SemVer)
            -p:InformationalVersion=$(InfoVer)
  
      - task: PublishPipelineArtifact@1
        displayName: Publish binaries for use in dependent jobs
        condition: eq(variables['Agent.OS'], 'Windows_NT') # We only use the binaries from the Windows built, it produces net452 and netstandard1.6 DLLs
        inputs:
          targetpath: ./
          artifactname: binaries
        

  - template: job-template.yml
    parameters:
      jobTitle: UnitTestBinaries
      displayName: Run integration tests
      dependsOn: BuildBinaries
      steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          inputs:
            targetpath: ./
            artifactname: binaries

        - task: DotNetCoreCLI@2
          displayName: Run unit tests
          inputs:
            command: test
            projects: src/Tests/UnitTests/bin/Release/$(targetFrameworkMoniker)/UnitTests.dll
            arguments: --framework $(targetFrameworkMoniker) --nologo
            testRunTitle: UnitTests $(imageName) $(targetFrameworkMoniker)

  - template: job-template.yml
    parameters:
      jobTitle: IntegrationTestBinaries
      displayName: Run integration tests
      dependsOn: BuildBinaries
      steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          inputs:
            targetpath: ./
            artifactname: binaries

        - task: DownloadGitHubRelease@0
          inputs:
            connection: github-no-grants
            userRepository: nats-io/nats-server
            defaultVersionType: latest
            itemPattern: $(natsServerPattern)
            downloadPath: $(Agent.TempDirectory)/nats-server

        - task: ExtractFiles@1
          displayName: 'Extract NATS-Server files '
          inputs:
            archiveFilePatterns: '$(Agent.TempDirectory)/nats-server/nats-server*.zip'
            destinationFolder: '$(Agent.TempDirectory)/nats-server'
            cleanDestinationFolder: false

        - task: CmdLine@2
          displayName: 'Include NATS-Server in path (nix)'
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          inputs:
            script: |
              if [ "$(Agent.OS)" = "Darwin" ]; then
                nats_server=$(find $AGENT_TEMPDIRECTORY/nats-server -perm +111 -type f)
                echo "##vso[task.setvariable variable=ComPlus_ThreadPool_ForceMinWorkerThreads]8"
              else
                nats_server=$(find $AGENT_TEMPDIRECTORY/nats-server -executable -type f)
              fi
              echo "nats_server: $nats_server"
              nats_server_dir=$(dirname $nats_server)
              echo "nats_server_dir: $nats_server_dir"
              echo "##vso[task.setvariable variable=PATH]$PATH:$nats_server_dir"

        - task: PowerShell@2
          displayName: 'Include NATS-Server in path (Windows)'
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          inputs:
            targetType: 'inline'
            script: |
              $natsServerDir = Get-ChildItem -Directory -Path "$(Agent.TempDirectory)\nats-server\nats-server-*" | Select -Expand FullName
              Write-Host "Found nats-server path: $natsServerDir"
              Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};$natsServerDir"

        - task: DotNetCoreCLI@2
          displayName: Run integration tests
          inputs:
            command: test
            projects: src/Tests/IntegrationTests/bin/Release/$(targetFrameworkMoniker)/IntegrationTests.dll
            arguments: --framework $(targetFrameworkMoniker) --nologo
            testRunTitle: IntegrationTests $(imageName) $(targetFrameworkMoniker)
