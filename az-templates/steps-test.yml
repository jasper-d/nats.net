parameters:
- name: testProject
  type: string
  values:
  - UnitTests
  - IntegrationTests
- name: mayFailOn # Agent.OS: Linux, Windows_NT, Darwin
  type: string
  default: ''
- name: preTestSteps
  type: stepList
  default: []

steps:
- checkout: self
  fetchDepth: 3

- bash: rm -rf ./*

- ${{ parameters.preTestSteps }}

- task: DownloadPipelineArtifact@2
  displayName: Download ${{ parameters.testProject }} binaries
  inputs:
    targetpath: ./
    patterns: |
      src/*
      src/NATS.Client/**/*
      src/Tests/${{ parameters.testProject }}/**/*
    artifactname: binaries

# We need to restore for coverlet.msbuild which isn't copied to the bin directory but only to .nuget
- task: CmdLine@2
  displayName: Restore ${{ parameters.testProject }}
  inputs:
    script: >-
      dotnet restore
      src/Tests/${{ parameters.testProject }}
      --no-dependencies

# We cannot set continueOnError dynamically due to Azure Devops limitations
# As a workaround, we duplicate the tasks and use a condition to switch between a version w/ and w/o continueOnError
# https://developercommunityapi.westus.cloudapp.azure.com/idea/782159/yaml-pipeline-continueonerror-cant-accept-a-variab.html
- task: CmdLine@2
  displayName: Run ${{ parameters.testProject }}
  condition: and(succeeded(), ne('${{ parameters.mayFailOn }}', variables['Agent.OS']))
  inputs:
    script: >-
      dotnet test
      src/Tests/${{ parameters.testProject }}
      --configuration Release
      --no-build
      --framework $(targetFrameworkMoniker)
      --logger trx
      --results-directory ./results
      -p:CollectCoverage=true
      -p:CoverletOutputFormat=cobertura
      -p:CoverletOutput='./results/'

- task: CmdLine@2
  displayName: Run ${{ parameters.testProject }} (continue on error)
  condition: and(succeeded(), eq('${{ parameters.mayFailOn }}', variables['Agent.OS']))
  continueOnError: true
  inputs:
    script: >-
      dotnet test
      src/Tests/${{ parameters.testProject }}
      --configuration Release
      --no-build
      --framework $(targetFrameworkMoniker)
      --logger trx
      --results-directory ./results
      -p:CollectCoverage=true
      -p:CoverletOutputFormat=cobertura
      -p:CoverletOutput='./results/'

- task: PublishTestResults@2
  displayName: Publish ${{ parameters.testProject }} results
  condition: always()
  inputs:
    testResultsFormat: VSTest
    testResultsFiles: '**/*.trx'
    testRunTitle: ${{ parameters.testProject }} $(imageName) $(targetFrameworkMoniker)

- task: PublishPipelineArtifact@1
  condition: always()
  displayName: Publish ${{ parameters.testProject }} TRX files manually
  inputs:
    targetpath: ./results
    artifactname: ${{ parameters.testProject }}-results-$(imageName)-$(targetFrameworkMoniker)

- task: Bash@3
  displayName: Publish ${{ parameters.testProject }} coverage
  condition: always()
  continueOnError: true # TODO: Fix me
  inputs:
    targetType: inline
    script: |
      # Upload coverage
      bash <(curl https://codecov.io/bash) -F ${{ parameters.testProject }} -F $(Agent.OS) -F $(targetFrameworkMoniker)
