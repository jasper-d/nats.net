stages:
- stage: Build
  jobs:
  - template: platform-dependent-job.yml
    parameters:
      jobTitle: BuildBinaries
      displayName: Build solution
      matrix:
        linux:
          imageName: ubuntu-18.04
        mac:
          imageName: macos-10.15
        windows:
          imageName: windows-2019
      steps:
      - task: CmdLine@2 # Restore frequently fails when using it
        displayName: Disable Nuget source "Microsoft Visual Studio Offline Packages"
        condition: eq(variables['Agent.OS'], 'Windows_NT') # Not an issue on Linux and MacOS obviously
        inputs:
          script: dotnet nuget disable source "Microsoft Visual Studio Offline Packages"

      - task: DotNetCoreCLI@2
        displayName: Build solution
        inputs:
          command: build
          projects: src/*.sln
          arguments: >-
            --configuration Release
            --no-incremental
            --nologo
            -p:TreatWarningsAsErrors=true
            -p:Version=$(SemVer)
            -p:InformationalVersion=$(InfoVer)

      - task: PublishPipelineArtifact@1
        displayName: Publish binaries for use in dependent jobs
        condition: eq(variables['Agent.OS'], 'Windows_NT') # We only use the binaries from the Windows built, it produces net452 and netstandard1.6 DLLs
        inputs:
          targetpath: ./
          artifactname: binaries

  - template: platform-dependent-job.yml
    parameters:
      jobTitle: UnitTestBinaries
      displayName: Run unit tests
      dependsOn: BuildBinaries
      steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          inputs:
            targetpath: ./
            patterns: src/Tests/UnitTests/bin/Release/$(targetFrameworkMoniker)/**/*
            artifactname: binaries

        - task: DotNetCoreCLI@2
          displayName: Run unit tests
          inputs:
            command: test
            projects: src/Tests/UnitTests/bin/Release/$(targetFrameworkMoniker)/UnitTests.dll
            arguments: --framework $(targetFrameworkMoniker) --nologo
            testRunTitle: UnitTests $(imageName) $(targetFrameworkMoniker)

  - template: platform-dependent-job.yml
    parameters:
      jobTitle: IntegrationTestBinaries
      displayName: Run integration tests
      dependsOn: BuildBinaries
      steps:
        - checkout: none

        - task: DownloadPipelineArtifact@2
          inputs:
            targetpath: ./
            patterns: src/Tests/IntegrationTests/bin/Release/$(targetFrameworkMoniker)/**/*
            artifactname: binaries

        - task: GoTool@0
          inputs:
            version: 1.14.7

        - task: Go@0
          displayName: go get github.com/nats-io/nats-server
          inputs:
            arguments: github.com/nats-io/nats-server
            
        - task: CmdLine@2
          displayName: Add nats-server to path (Unix)
          condition: ne(variables['Agent.OS'], 'Windows_NT')
          inputs:
            script: |
              echo "GOPATH: $GOPATH"
              echo "GOBIN: $GOBIN"
              echo "##vso[task.setvariable variable=PATH]$PATH:$GOBIN"
              $GOBIN/nats-server -v

        - task: CmdLine@2
          displayName: Add nats-server to path (Windows)
          condition: eq(variables['Agent.OS'], 'Windows_NT')
          inputs:
            script: |
              echo "GOPATH: %GOPATH%"
              echo "GOBIN: %GOBIN%"
              echo "##vso[task.setvariable variable=PATH]${env:PATH};%GOBIN%"
              %GOBIN%\nats-server -v

        - task: CmdLine@2
          displayName: Verify nats-server
          inputs:
            script: |
              nats-server -v

        - task: CmdLine@2
          displayName: Run integration tests
          inputs:
            script: |
              dotnet test src/Tests/IntegrationTests/bin/Release/$(targetFrameworkMoniker)/IntegrationTests.dll --framework $(targetFrameworkMoniker) --logger trx --results-directory ./results

        - task: PublishTestResults@2
          condition: always()
          inputs:
            testResultsFormat: VSTest
            testResultsFiles: '**/*.trx'
            testRunTitle: IntegrationTests $(imageName) $(targetFrameworkMoniker)

        - task: PublishPipelineArtifact@1
          condition: always()
          displayName: Publish test results manually
          inputs:
            targetpath: ./results
            artifactname: test-results-$(imageName)-$(targetFrameworkMoniker)