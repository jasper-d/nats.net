stages:
- stage: Build
  jobs:
  - job: BuildBinaries
    displayName: Build solution
    timeoutInMinutes: 10
    strategy:
      matrix:
        linux:
          imageName: ubuntu-18.04
        mac:
          imageName: macos-10.15
        windows:
          imageName: windows-2019

    pool:
      vmImage: $(imageName)

    steps:
    - task: PowerShell@2
      displayName: 'Print env'
      inputs:
        targetType: 'inline'
        script: 'gci Env:'
                  
    - task: CmdLine@2 # Restore frequently fails when using it
      displayName: Disable Nuget source "Microsoft Visual Studio Offline Packages"
      condition: eq(variables['Agent.OS'], 'Windows_NT') # Not an issue on Linux and MacOS obviously
      inputs:
        script: dotnet nuget disable source "Microsoft Visual Studio Offline Packages"

    - task: DotNetCoreCLI@2
      displayName: Build solution
      inputs:
        command: build
        projects: src/*.sln
        arguments: >-
          --configuration Release
          --no-incremental
          --nologo
          -p:TreatWarningsAsErrors=true
          -p:Version=$(SemVer)
          -p:InformationalVersion=$(InfoVer)

    - task: PublishPipelineArtifact@1
      displayName: Publish binaries for use in dependent jobs
      condition: eq(variables['Agent.OS'], 'Windows_NT') # We only use the binaries from the Windows built, it produces net452 and netstandard1.6 DLLs
      inputs:
        targetpath: ./
        artifactname: binaries

  - job: UnitTestBinaries
    dependsOn: BuildBinaries
    displayName: Run unit tests
    timeoutInMinutes: 10
    strategy:
      matrix:
        linux-netcore:
          imageName: ubuntu-18.04
          targetFrameworkMoniker: netcoreapp3.1
        mac-netcore:
          imageName: macos-10.15
          targetFrameworkMoniker: netcoreapp3.1
        windows-netcore:
          imageName: windows-2019
          targetFrameworkMoniker: netcoreapp3.1
        windows-nextfx:
          imageName: windows-2019
          targetFrameworkMoniker: net452
    pool:
      vmImage: $(imageName)

    steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        inputs:
          targetpath: ./
          artifactname: binaries

      - task: DotNetCoreCLI@2
        displayName: Run unit tests
        inputs:
          command: test
          projects: src/Tests/UnitTests/bin/Release/$(targetFrameworkMoniker)/UnitTests.dll
          arguments: --framework $(targetFrameworkMoniker) --nologo
          testRunTitle: UnitTests $(imageName) $(targetFrameworkMoniker)

  - job: IntegrationTestBinaries
    dependsOn: BuildBinaries
    displayName: Run integration tests
    timeoutInMinutes: 7
    strategy:
      matrix:
        linux-netcore:
          imageName: ubuntu-18.04
          targetFrameworkMoniker: netcoreapp3.1
          natsServerPattern: nats-server-*-linux-amd64.zip
        mac-netcore:
          imageName: macos-10.15
          targetFrameworkMoniker: netcoreapp3.1
          natsServerPattern: nats-server-*-darwin-amd64.zip
        windows-netcore:
          imageName: windows-2019
          targetFrameworkMoniker: netcoreapp3.1
          natsServerPattern: nats-server-*-windows-amd64.zip
        windows-nextfx:
          imageName: windows-2019
          targetFrameworkMoniker: net452
          natsServerPattern: nats-server-*-windows-amd64.zip
    pool:
      vmImage: $(imageName)

    steps:
      - checkout: none

      - task: DownloadPipelineArtifact@2
        inputs:
          targetpath: ./
          artifactname: binaries

      - task: DownloadGitHubRelease@0
        inputs:
          connection: jasper-d
          userRepository: nats-io/nats-server
          defaultVersionType: latest
          itemPattern: $(natsServerPattern)
          downloadPath: $(Agent.TempDirectory)/nats-server

      - task: ExtractFiles@1
        displayName: 'Extract NATS-Server files '
        inputs:
          archiveFilePatterns: '$(Agent.TempDirectory)/nats-server/nats-server*.zip'
          destinationFolder: '$(Agent.TempDirectory)/nats-server'
          cleanDestinationFolder: false

      - task: CmdLine@2
        displayName: 'Include NATS-Server in path (Linux)'
        condition: eq(variables['Agent.OS'], 'Linux')
        inputs:
          script: |
            nats_server=$(find $AGENT_TEMPDIRECTORY/nats-server -executable -type f)
            echo "nats_server: $nats_server"
            nats_server_dir=$(dirname $nats_server)
            echo "nats_server_dir: $nats_server_dir"
            echo "##vso[task.setvariable variable=PATH]$PATH:$nats_server_dir"

      - task: CmdLine@2
        displayName: 'Include NATS-Server in path (MacOS)'
        condition: eq(variables['Agent.OS'], 'Darwin')
        inputs:
          script: |
            nats_server=$(find $AGENT_TEMPDIRECTORY/nats-server -perm +111 -type f)
            echo "nats_server: $nats_server"
            nats_server_dir=$(dirname $nats_server)
            echo "nats_server_dir: $nats_server_dir"
            echo "##vso[task.setvariable variable=PATH]$PATH:$nats_server_dir"

      - task: PowerShell@2
        displayName: 'Include NATS-Server in path (Windows)'
        condition: eq(variables['Agent.OS'], 'Windows_NT')
        inputs:
          targetType: 'inline'
          script: |
            $natsServerDir = Get-ChildItem -Directory -Path "$(Agent.TempDirectory)\nats-server\nats-server-*" | Select -Expand FullName
            Write-Host "Found nats-server path: $natsServerDir"
            Write-Host "##vso[task.setvariable variable=PATH;]${env:PATH};$natsServerDir"

      - task: DotNetCoreCLI@2
        displayName: Run integration tests
        inputs:
          command: test
          projects: src/Tests/IntegrationTests/bin/Release/$(targetFrameworkMoniker)/IntegrationTests.dll
          arguments: --framework $(targetFrameworkMoniker) --nologo
          testRunTitle: IntegrationTests $(imageName) $(targetFrameworkMoniker)
